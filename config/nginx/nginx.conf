events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Upstream definitions
    upstream coc_web {
        server coc-web-app:80;
    }

    upstream coc_api {
        server coc-api-server:3001;
    }

    # HTTP server block - dev/prod domains, redirect to HTTPS, allow ACME
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name feastorfamine.test feastorfamine.xyz www.feastorfamine.xyz;

        # ACME challenge path for Let's Encrypt (prod)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }

        # Health check endpoint (allow HTTP for health checks)
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server block (dev default: self-signed certs in /opt/coc/ssl)
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name feastorfamine.test;

        # Self-signed certificate paths (dev)
        ssl_certificate /opt/coc/ssl/server.crt;
        ssl_certificate_key /opt/coc/ssl/server.key;
        ssl_dhparam /opt/coc/ssl/dhparam.pem;

        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # CSP adjusted for app and websockets
        add_header Content-Security-Policy "default-src 'self' https: data: blob: 'unsafe-inline' 'unsafe-eval'; connect-src 'self' https: wss: ws:; img-src 'self' https: data: blob:; font-src 'self' https: data:;" always;

            # Main web application with SPA fallback. Static assets served by coc_web container.
            location / {
                proxy_pass http://coc_web;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # SPA history API fallback: if file not found, serve index.html from upstream.
            # Use named location to avoid proxy_pass URI issues.
            error_page 404 = @spa_fallback;
            location @spa_fallback {
                proxy_pass http://coc_web;
                proxy_set_header Host $host;
            }

        # Redirect legacy /coc path to root SPA (prevents 404s if users bookmark /coc)
        location = /coc {
            return 302 /;
        }

    # Favicon/icon assets
    location = /favicon.ico { proxy_pass http://coc_web; expires 7d; }
    location = /favicon.svg { proxy_pass http://coc_web; expires 7d; }

    # Simple health endpoint for upstream web container check (static file in /health)
    location = /health { proxy_pass http://coc_web; access_log off; }

        # API routes
        location /api {
            proxy_pass http://coc_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # WebSocket proxy for Socket.IO
        location /socket.io {
            proxy_pass http://coc_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
