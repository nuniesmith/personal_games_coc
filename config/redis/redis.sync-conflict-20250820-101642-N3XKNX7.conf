###############################################
# Redis Configuration (Project Local Override) #
###############################################
# This file provides a sane baseline for the project's Redis instance.
# Mount it into the container (docker-compose example):
#   services:
#     redis:
#       volumes:
#         - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
#       command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
#
# NOTE: Redis does not expand environment variables inside this file.
# If you need dynamic values (e.g. password), pass them via command args
# or use an entrypoint script. For now we keep static / commented guidance.

###############################################
# NETWORKING
###############################################
# Bind to all interfaces inside Docker (limited by container networking);
# change to specific subnets / addresses in production if exposed.
bind 0.0.0.0 ::0

# Disable protected mode since we're in a container network. Keep it 'yes'
# if you ever run this outside Docker without proper firewall.
protected-mode no

# Default port
port 6379

# TCP backlog for high connection churn (Discord / API bursts)
# 511 is Linux default max for many distros.
tcp-backlog 511

# Close idle connections after N seconds (0 = never)
# Useful if many ephemeral clients connect.
tcp-keepalive 300

###############################################
# GENERAL
###############################################
# Daemonize only when running directly on host (Docker ignores this)
# daemonize no

# Set a human-friendly name for CLIENT LIST / INFO outputs
# (Redis 7+ feature) -- comment out if unsupported.
# server-name coc-stack-redis

###############################################
# SECURITY
###############################################
# IMPORTANT: Set a password for non-isolated environments.
# requirepass CHANGE_ME_STRONG_PASSWORD
# To enable ACLs later you can add users:
# user default on >CHANGE_ME_STRONG_PASSWORD ~* +@all

# Rename potentially dangerous commands to reduce accidental misuse.
# Comment these if you rely on them in automation.
rename-command FLUSHALL ""
rename-command FLUSHDB ""
rename-command CONFIG ""
rename-command SHUTDOWN ""
rename-command DEBUG ""

###############################################
# MEMORY
###############################################
# Define a memory ceiling (uncomment & adjust based on host). Example: 512mb
# maxmemory 512mb
# When memory is full, use an eviction policy suitable for caches.
# volatile-lru | allkeys-lru | volatile-ttl | volatile-random | allkeys-random | noeviction
# For mixed workload (caching + persistent) consider 'allkeys-lru'.
# maxmemory-policy allkeys-lru

# Actively rehash / free memory while idle
activerehashing yes

###############################################
# SNAPSHOTTING (RDB)
###############################################
# Keep a few snapshot rules: after 900s if >=1 key changed; after 300s if 10; after 60s if 10000
save 900 1
save 300 10
save 60 10000
# Location of dump file
# dbfilename dump.rdb
# dir /data

###############################################
# AOF (Append Only File)
###############################################
# Enable AOF for safer persistence (RDB + AOF is common for durability)
appendonly yes
# 'everysec' = durability with good performance; 'always' = max safety slower; 'no' = fastest less safe.
appendfsync everysec
# Auto rewrite when AOF growth ratio / size thresholds are met.
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

###############################################
# PERFORMANCE TUNING
###############################################
# Disable RDB if you rely only on AOF (then comment save directives).
# stop-writes-on-bgsave-error yes
rdbchecksum yes
io-threads 1

###############################################
# LATENCY OBSERVABILITY
###############################################
# Track slow operations (microseconds threshold). 20000us = 20ms.
slowlog-log-slower-than 20000
slowlog-max-len 256

###############################################
# KEYSPACE NOTIFICATIONS
###############################################
# Enable if the app wants keyspace events (adds overhead). Example: "Ex" for expired + evicted.
# notify-keyspace-events Ex

###############################################
# APPEND MEMORY PURGE (Redis >=7)
###############################################
# Controls memory reclamation after rewrites.
# appendonly yes implies rewrite; defaults are generally fine.

###############################################
# CLUSTER / REPLICATION
###############################################
# Not clustering right now; configs left empty intentionally.
# replicaof <masterip> <masterport>
# replica-read-only yes

###############################################
# MODULES
###############################################
# Load modules here if needed in the future.
# loadmodule /path/to/module.so

###############################################
# LOGGING
###############################################
# Log level: debug | verbose | notice | warning
loglevel notice
# Log file (empty string = stdout)
# logfile ""

###############################################
# APP CUSTOM NOTES
###############################################
# - The Discord + Clash of Clans integration mainly uses Redis for:
#   * Caching API responses
#   * Rate limit buckets
#   * Background job coordination
# - If you introduce Celery / RQ later, evaluate persistence & memory policy again.
# - Consider enabling Redis AUTH (requirepass) in any shared or cloud environment.

# End of redis.conf
