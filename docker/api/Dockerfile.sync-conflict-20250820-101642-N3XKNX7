############################
# Builder for dependencies #
############################
ARG NODE_VERSION=20-alpine
FROM node:${NODE_VERSION} AS base
WORKDIR /app
ENV CI=true

############################
# Dependencies layer       #
############################
FROM base AS deps
WORKDIR /app
COPY src/api/package*.json ./
RUN npm install && npm cache clean --force

############################
# Test layer (optional)    #
############################
FROM deps AS test
COPY src/api/. .
RUN npm test || echo "Tests failed (allowing build to continue)." && true

############################
# Runtime image            #
############################
FROM node:${NODE_VERSION} AS runtime
WORKDIR /app

# Add minimal runtime tools (curl for healthcheck)
RUN apk add --no-cache curl

# Copy only node_modules and package.json
ARG INCLUDE_DEV=false
COPY --from=deps /app/package*.json ./
COPY --from=deps /app/node_modules ./node_modules

# Copy application source
COPY src/api/. .

# Create needed writable dirs & non-root user
RUN mkdir -p logs data uploads \
	&& addgroup -g 1001 -S nodejs || true \
	&& adduser -S nodejs -u 1001 || true \
	&& chown -R nodejs:nodejs /app
USER nodejs

ENV NODE_ENV=production
ENV ENABLE_REDIS_CACHE=true
EXPOSE 3001
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD curl -f http://localhost:3001/health || exit 1
CMD ["npm", "start"]

# Build args usage example:
# docker build --build-arg NODE_VERSION=20-alpine -t coc-api .